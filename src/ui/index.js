import addOnUISdk from "https://new.express.adobe.com/static/add-on-sdk/sdk.js";

addOnUISdk.ready.then(async () => {
    console.log("addOnUISdk is ready for use.");

    const { runtime } = addOnUISdk.instance;

    const equationInput = document.getElementById("equation");
    const createGraphButton = document.getElementById("createGraph");
    const graphContainer = document.getElementById("graph-container");

    const script = document.createElement("script");
    script.src = "https://www.desmos.com/api/v1.7/calculator.js?apiKey=dcb31709b452b1cf9dc26972add0fda6";
    script.async = true;
    document.head.appendChild(script);

    let calculator;

    // Function to convert data URL to Blob
    function dataURLtoBlob(dataURL) {
        const byteString = atob(dataURL.split(',')[1]);
        const mimeString = dataURL.split(',')[0].split(':')[1].split(';')[0];
        const ab = new ArrayBuffer(byteString.length);
        const ia = new Uint8Array(ab);
        for (let i = 0; i < byteString.length; i++) {
            ia[i] = byteString.charCodeAt(i);
        }
        return new Blob([ab], { type: mimeString });
    }

    script.onload = () => {
        calculator = Desmos.GraphingCalculator(graphContainer, {
            keypad: false,
            expressions: false,
            settingsMenu: false,
            zoomButtons: false
        });

        // Update graph preview on input change
        equationInput.addEventListener("input", () => {
            const equation = equationInput.value.trim();
            calculator.setExpressions([]);
            if (equation) {
                calculator.setExpression({
                    id: "graph1",
                    latex: equation
                });
                createGraphButton.disabled = false;
            } else {
                createGraphButton.disabled = true;
            }
        });

        createGraphButton.addEventListener("click", async () => {
            const equation = equationInput.value.trim();
            const imageDataUrl = calculator.screenshot({
                width: 800,
                height: 600,
                targetPixelRatio: 2
            });

            // Convert data URL to Blob
            const imageBlob = dataURLtoBlob(imageDataUrl);

            try {
                // Add the image to the Adobe Express document
                await addOnUISdk.app.document.addImage(imageBlob, {
                    title: `Graph of ${equation}`,
                    author: "Generated by Graphing Add-on"
                });
                console.log("Graph image added to the document.");
            } catch (error) {
                console.error("Error adding image to document:", error);
            }
        });

        createGraphButton.disabled = true;
    };
});